services:
  # Frontend
  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "3000:3000"
    networks:
      - myapp-network
    depends_on:
      - backend
    restart: always

  # Backend
  backend:
    build: ./backend
    container_name: backend
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=myappdb
    networks:
      - myapp-network
    volumes:
      - ./backend/uploads:/app/uploads
    depends_on:
      - db
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database
  db:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=myappdb
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - myapp-network

  # Reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - myapp-network
    depends_on:
      - frontend
      - backend

  # Monitoring
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    ports:
      - "9000:9000"
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - myapp-network

volumes:
  db-data:
  portainer_data:

networks:
  myapp-network:
    driver: bridge
